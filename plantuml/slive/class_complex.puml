@startuml class-complex

!include https://unpkg.com/plantuml-style-c4@latest/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml
!include https://unpkg.com/plantuml-style-c4@latest/class-diagram-helper.puml
' uncomment the following line and comment the first to use locally
'!include class-diagram-helper.puml

GREY_ARROW


interface protocol.rtmp.Conn {
}

interface server.Handler {
    Serve(conn net.Conn)
}

interface http.Handler  {
	ServeHTTP(ResponseWriter, *Request)
}

class server.RTMPServer {
}

class server.Server {
    ListenAndServe(ctx context.Context, opts ...ListenServeOption) error
}

class protocol.rtmp.Conn {
    NewConn(conn net.Conn) error
}

package stream {
	package rtmp {}
	package httpflv {}
	rtmp -[hidden]> httpflv
}

package http #DDDDDD {
}

package http2 #DDDDDD {
}

' package av {
' 	interface av.CodecData {}
' 	interface av.Muxer {}
' 	interface av.Demuxer {}
' 	class av.Packet {}
' }

' class server.ListenServeOptions {
' 	ReadTimeout  time.Duration
' 	WriteTimeout time.Duration

' 	Address  string
' 	Protocol string
' 	Handler  Handler

' 	TLSCertFile string
' 	TLSKeyFile  string
' }

interface container.flv.WriteFlusher {
}
interface io.Writer {
}
interface http2.Flusher {
}
interface stream.Streamer {
	Prepare() error
	Cycle() error
	Stop() 
	Type()
}
note top of stream.Streamer : Forwarder/Player等实现此接口，为了图不太杂，这里实现箭头就略去

class stream.httpflv.Producer {
}

' stream.receivers->stream.rtmp.Service
' stream.players->stream.rtmp.Player
' stream.players->stream.httpflv.Player
' stream.forwarders->stream.rtmp.Forwarder
container.flv.Muxer-->container.flv.WriteFlusher
container.flv.WriteFlusher-->http2.Flusher
container.flv.WriteFlusher-->io.Writer
http2.Flusher<|..http2.ResponseWriter

server.Handler<|..server.RTMPServer
http.Handler<|..server.HTTPFLVServer
http.Handler<|..server.AdminServer
server.HTTPFLVServer-->stream.httpflv.Player
server.RTMPServer-->stream.rtmp.Service
stream.rtmp.Service-->stream.rtmp.PreHandler
stream.rtmp.Service-->stream.rtmp.Forwarder
stream.rtmp.Service-->stream.rtmp.Player
stream.rtmp.Service-->stream.rtmp.Receiver
stream.rtmp.Service-->stream.rtmp.Ingester
server.Handler<--server.Server
http.Handler<--server.Server

' stream.rtmp.Forwarder..|>stream.Streamer
' stream.rtmp.Ingester..|>stream.Streamer
' stream.rtmp.Player..|>stream.Streamer
' stream.httpflv.Player..|>stream.Streamer
stream.streamers  "1" *-- "0..n" stream.Streamer
stream.rtmp.Receiver "1" *-- "1" stream.rtmp.Producer
stream.rtmp.Ingester-->stream.rtmp.Producer
stream.rtmp.Player-->stream.rtmp.Consumer
stream.httpflv.Producer-->avque.Queue
stream.rtmp.Forwarder "1" *-- "0..n" stream.rtmp.Consumer
stream.rtmp.Forwarder "1" *-- "0..n" stream.rtmp.ForwardSource 
stream.rtmp.ForwardSource-[hidden]->stream.rtmp.Forwarder
stream.rtmp.PreHandler-->protocol.rtmp.Conn
avque.Queue->avque.QueueCursor
stream.rtmp.Producer->avque.Queue
avque.QueueCursor<-stream.rtmp.Consumer
stream.httpflv.Ingester->stream.httpflv.Producer
stream.httpflv.Producer-->container.flv.Muxer
stream.rtmp.Consumer<-stream.httpflv.Player
stream.rtmp.Producer-->protocol.rtmp.Conn
stream.rtmp.Producer-[hidden]-->protocol.rtmp.Conn
stream.rtmp.Consumer-->protocol.rtmp.Conn
stream.rtmp.Consumer-[hidden]-->protocol.rtmp.Conn
protocol.rtmp.Conn<|..protocol.rtmp.ConnImpl
protocol.rtmp.ConnImpl-->protocol.rtmp.Conn
protocol.rtmp.Conn-->av.CodecData
protocol.rtmp.Conn-->av.Packet

interface av.CodecData {
    Type() CodecType
}

interface av.VideoCodecData {
    Width() int
	Height() int
}

interface av.AudioCodecData {
    SampleFormat() SampleFormat
	SampleRate() int
	ChannelLayout() ChannelLayout
	PacketDuration([]byte) (time.Duration, error)
}

interface av.PacketWriter {
	WritePacket(Packet) error
}

interface av.PacketReader {
	ReadPacket() (Packet, error)
}

interface av.Muxer {
	WriteHeader([]CodecData) error
	WriteTrailer() error
}

interface av.Demuxer {
	Streams() ([]CodecData, error)
}

interface av.MuxCloser {
	Close() error
}

interface av.DemuxCloser {
	Close() error
}

class container.flv.Demuxer {
    prober *Prober
	bufr   *bufio.Reader
}

class container.flv.Muxer {
    bufw    WriteFlusher
	b       []byte
	streams []av.CodecData
}

interface container.flv.WriteFlusher {
}
interface io.Writer {
}
interface http2.Flusher {
}

class container.flv.Prober {
    Streams  []av.CodecData
	CachedPkts []av.Packet
}

package codec {
	package h264 {}
	package aac {}
}

class codec.h264.CodecData {
    AVCDecoderConfRecordBytes() []byte
    SPS() []byte
    PPS() []byte
}
class codec.aac.CodecData {}

' class HandlerMuxer {
'     WriteHeader(streams []av.CodecData) (err error)
'     WriteTrailer() (err error)
'     Close() error
' }

' class HandlerDemuxer {
'     Close() error
' }

av.PacketReader<|--av.Demuxer
av.PacketWriter<|--av.Muxer
av.MuxCloser-|>av.Muxer
av.Demuxer<|-av.DemuxCloser
av.Muxer<|..container.flv.Muxer
av.Demuxer<|..container.flv.Demuxer
' HandlerMuxer-->av.MuxCloser
' HandlerDemuxer-->av.DemuxCloser
container.flv.Demuxer-->container.flv.Prober
' HandlerMuxer-->flv.Muxer
' HandlerDemuxer-->flv.Demuxer
av.CodecData<|--av.VideoCodecData
av.CodecData<|--av.AudioCodecData
av.VideoCodecData<|--codec.h264.CodecData
av.AudioCodecData<|--codec.aac.CodecData
' av.MuxCloser-[hidden]--> container.flv.Muxer
' av.DemuxCloser-[hidden]--> container.flv.Demuxer
' av.MuxCloser-[hidden]-->HandlerMuxer
' av.DemuxCloser-[hidden]-->HandlerDemuxer
@enduml