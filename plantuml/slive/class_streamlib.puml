@startuml class-streamlib

!include https://unpkg.com/plantuml-style-c4@latest/core.puml
' uncomment the following line and comment the first to use locally
'!include core.puml
!include https://unpkg.com/plantuml-style-c4@latest/class-diagram-helper.puml
' uncomment the following line and comment the first to use locally
'!include class-diagram-helper.puml

GREY_ARROW

interface av.CodecData {
    Type() CodecType
}

interface av.VideoCodecData {
    Width() int
	Height() int
}

interface av.AudioCodecData {
    SampleFormat() SampleFormat
	SampleRate() int
	ChannelLayout() ChannelLayout
	PacketDuration([]byte) (time.Duration, error)
}

interface av.PacketWriter {
	WritePacket(Packet) error
}

interface av.PacketReader {
	ReadPacket() (Packet, error)
}

interface av.Muxer {
	WriteHeader([]CodecData) error
	WriteTrailer() error
}

interface av.Demuxer {
	Streams() ([]CodecData, error)
}

interface av.MuxCloser {
	Close() error
}

interface av.DemuxCloser {
	Close() error
}

class container.flv.Demuxer {
    prober *Prober
	bufr   *bufio.Reader
}

class container.flv.Muxer {
    bufw    WriteFlusher
	b       []byte
	streams []av.CodecData
}

interface container.flv.WriteFlusher {
}
interface io.Writer {
}
interface http.Flusher {
}

class container.flv.Prober {
    Streams  []av.CodecData
	CachedPkts []av.Packet
}

package codec {
	package h264 {}
	package aac {}
}

class codec.h264.CodecData {
    AVCDecoderConfRecordBytes() []byte
    SPS() []byte
    PPS() []byte
}
class codec.aac.CodecData {}

' class HandlerMuxer {
'     WriteHeader(streams []av.CodecData) (err error)
'     WriteTrailer() (err error)
'     Close() error
' }

' class HandlerDemuxer {
'     Close() error
' }

av.PacketReader<|--av.Demuxer
av.PacketWriter<|--av.Muxer
av.MuxCloser-|>av.Muxer
av.Demuxer<|-av.DemuxCloser

av.Packet<--av.PacketWriter
av.Packet<--av.PacketReader
av.CodecData<|--av.VideoCodecData
av.CodecData<|--av.AudioCodecData
av.VideoCodecData<|--codec.h264.CodecData
av.AudioCodecData<|--codec.aac.CodecData
container.flv.Demuxer-->container.flv.Prober
av.Muxer<|..container.flv.Muxer
av.Demuxer<|..container.flv.Demuxer
container.flv.Muxer-->container.flv.WriteFlusher
container.flv.WriteFlusher-->http.Flusher
container.flv.WriteFlusher-->io.Writer
http.Flusher<|..http.ResponseWriter

interface protocol.rtmp.Conn {
	ReadConnect() error
	ReadCommand() error
	RemoteAddr() string
	ConnInfo() ConnInfo

    Dial(url string) error
	HandshakeClient() error
	ConnectPublish() error
	ConnectPlay() error

	HandshakeServer() error
	IsPublishing() bool
	IsPlaying() bool
}

protocol.rtmp.Conn <|.. protocol.rtmp.conn
av.MuxCloser <|-- protocol.rtmp.Conn
av.DemuxCloser <|-- protocol.rtmp.Conn

@enduml